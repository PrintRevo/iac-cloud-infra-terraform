name: Terraform Deploy

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: "printrevo-terraform-state"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup AWS Profile
        run: |
          mkdir -p ~/.aws
          echo "[printrevo-terraform]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = $AWS_REGION" >> ~/.aws/config

      # - name: Ensure S3 bucket for Terraform state exists
      #   run: |
      #       BUCKET_NAME="printrevo-terraform-state"
      #       REGION="eu-central-1"
      #       if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
      #         if [ "$REGION" == "us-east-1" ]; then
      #           aws s3api create-bucket --bucket "$BUCKET_NAME"
      #         else
      #           aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
      #         fi
      #         echo "S3 bucket $BUCKET_NAME created."
      #       else
      #         echo "S3 bucket $BUCKET_NAME already exists."
      #       fi

     
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Initialize Terraform Backend (S3)
        run: TF_LOG=DEBUG terraform init

      - name: Retrieve environment variables from AWS Parameter Store
        id: ssm
        run: |
          DB_PASSWORD=$(aws ssm get-parameter --name "rds_password" --with-decryption --query "Parameter.Value" --output text)
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "::set-output name=db_password::$DB_PASSWORD"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Set execute permission for the import script
        run: chmod +x ./bin/terraform-import.sh

      - name: Import AWS Services by Environment Tag
        run: ./bin/terraform-import.sh dev || echo "Import script failed but continuing..."

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var aws_profile=printrevo-terraform -var github_token='${{ steps.ssm.outputs.github_pat_token }}' -var aws_region='${{ secrets.AWS_REGION }}' -var aws_access_key_id='${{ secrets.AWS_ACCESS_KEY_ID }}' -var aws_access_secret_key='${{ secrets.AWS_SECRET_ACCESS_KEY }}' -var rds_password='${{ steps.ssm.outputs.db_password }}'

      - name: Set execute permission for the apply script
        run: chmod +x ./bin/terraform-apply.sh

      - name: Run Terraform Apply
        run: ./bin/terraform-apply.sh
